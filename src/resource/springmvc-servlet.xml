<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util-4.1.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task-4.1.xsd">

    <!-- 对web包中的所有component注解类进行扫描，以完成Bean创建和自动依赖注入的功能,第二个配置扫描AutoWired等默认为true -->
    <context:component-scan base-package="com.pipi" annotation-config="true"/>

    <!-- 支持spring3.x后的mvc注解
        1. 如果web.xml中的映射url为/则必须写
        2. 实际项目开发时，必须写
        3. 使用到AJAX、JSON等数据转换或传递时必须写
    此标签用于初始化RequestMappingHandlerMapping和RequestMappingHandlerAdapter，
    DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter已过时
    并注入相关属性对象，相当于至少做了如下已注释的配置
     -->
    <!--
   <bean class="org.springframework.web.servlet.mvc.annotation.RequestMappingHandlerMapping"></bean>
   <bean class="org.springframework.web.servlet.mvc.annotation.RequestMappingHandlerAdapter">
       <property name="messageConverters">
           <list>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
               <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"></bean>
               <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"></bean>
               <bean class="org.springframework.http.converter.StringHttpMessageConverter"></bean>
               <bean class="org.springframework.http.converter.ResourceHttpMessageConverter"></bean>
               <bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter"></bean>
               <bean class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter"></bean>
               <bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter"></bean>
           </list>
       </property>
   </bean>
    -->
    <!-- springmvc配置 -->
    <mvc:annotation-driven/>

    <!--对模型视图名称的解析，即在模型视图名称添加前后缀 -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver"
            p:suffix=".html" p:prefix="/WEB-INF/pages/">
        <!-- 如果页面使用jstl的话，配置下面的属性，而且还要导入jstl相关jar包 -->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    </bean>

    <!-- 配置springMVC的拦截器 -->
    <mvc:interceptors>
        <!-- 拦截所有请求，在视图页面关闭session -->
        <bean name="openSessionInViewInterceptor"
              class="org.springframework.orm.hibernate4.support.OpenSessionInViewInterceptor">
            <property name="sessionFactory">
                <ref bean="sessionFactory"/>
            </property>
        </bean>
        <bean class="com.pipi.common.interceptor.AuthorityInterceptor"></bean>
        <!-- 拦截具体路径url请求
        <mvc:interceptor>
            <mvc:mapping path="/manage/*" />
            <bean class="com.pipi.common.interceptor.AuthorityInterceptor"></bean>
        </mvc:interceptor> -->
    </mvc:interceptors>

    <!-- 通过JNDI配置数据源，配置sessionFactory -->
    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName">
            <value>java:comp/env/jdbc/DB</value>
        </property>
    </bean>
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">
                    org.hibernate.dialect.MySQL5InnoDBDialect
                </prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop><!-- hb mapping,data definition language,即自动生成建表语句 -->
                <!-- batch_size和fetch_size对mysql无效，对Oracle有效
                <prop key="hibernate.jdbc.batch_size">100</prop>
                <prop key="hibernate.jdbc.fetch_size">50</prop>
                <prop key="hibernate.current_session_context_class">thread</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop> -->
            </props>
        </property>
        <!-- 扫描实体类 -->
        <property name="packagesToScan">
            <value>com.pipi.entity</value>
        </property>
    </bean>

    <!-- 配置事务管理 -->
    <bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <!-- xml事务管理 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!-- 默认情况：
                衍生繁殖，propagation为REQUIRED
                只读，read-only为false
                rollback-for为RunTimeException(有RunTimeException时回滚)
                isolation隔离级别
                timeout事务执行时间过长时终止掉当前事务
            -->
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="merge*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="execute*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="list*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="validate*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="count*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- xml的aop配置 -->
    <aop:config>
        <aop:pointcut expression="execution(public * com.pipi.service..*.*(..))" id="businessService"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="businessService"/>
    </aop:config>
    <!-- 也支持annotation事务管理 -->
    <tx:annotation-driven transaction-manager="txManager"/>
    <!-- 支持aop注解，例如@Aspect、@Before()、@AfterReturn()等 ，若proxy-target-class="false"或不配则是接口注入，若为true则支持类注入 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 处理文件上传 -->
    <bean id="multipartResolver"
          class="com.pipi.common.upload.CommonsMultipartResolverExt">
        <property name="defaultEncoding" value="utf-8"/> <!-- 默认编码 (ISO-8859-1) -->
        <property name="maxInMemorySize" value="10240"/> <!-- 最大内存大小 (10240B) -->
        <property name="uploadTempDir" value="/tmp"/> <!-- 上传时的临时目录名 (WebUtils#TEMP_DIR_CONTEXT_ATTRIBUTE) -->
        <property name="maxUploadSize" value="-1"/> <!-- 104857600最大文件大小，-1为无限止(-1) -->
    </bean>

    <!-- 配置spring的javamail -->
    <bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <!-- smtp地址 -->
        <property name="host" value="smtp.163.com"></property>
        <!-- 端口 -->
        <property name="port" value="25"></property>
        <!-- 邮件地址 -->
        <property name="username" value="tommy__yan@163.com"></property>
        <!-- 密码 -->
        <property name="password" value="youxiang.."></property>
        <!-- 发送邮件时使用的字符集 -->
        <property name="defaultEncoding" value="UTF-8"></property>
        <!-- javaMail相关参数设置 -->
        <property name="javaMailProperties">
            <props>
                <!-- 发送模式 debug
                <prop key="mail.debug">true</prop> -->
                <!-- 是否需要auth认证 -->
                <prop key="mail.smtp.auth">true</prop>
            </props>

        </property>
    </bean>

    <!-- 开启这个配置，spring才能识别@Scheduled注解  -->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
    <task:scheduler id="qbScheduler" pool-size="10"/>
</beans>
